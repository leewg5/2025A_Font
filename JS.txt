(방법1)
1. HTML 파일내 <body> 마크업 안에서 가장 아래
2. <script> 마크업을 이용하여 JS코드를 작성한다.

(방법2) 
1. JS 파일 생성하여 JS코드를 작성한다.
2. HTML 파일내 <body> 마크업 안에서 가장 아래
3. <script src="JS파일경로"><script>

[JS 실행 확인]
    - 브라우저(크롬)에서 F12(개발자도구)
        -> sources 탭에서 .js파일 여부 확인.
        -> console 탭에서 .js 출력 메세지 확인.

[기본 필수 용어]
리터럴 : 프로그래밍 언어에서 소스 코드에 직접 표현된 값.
컴퓨터는 0과 1(2진수) 밖에 모른다?? 각 프로그래밍 언어 회사들은 0과 1로 조합한
미리 만들어진 단어가 필요하다. 그래서 개발자가 사용할 수 있도록 미리 정해진 값들을 넣어놨다.
상수 = 변화(고정된)없는 값, 변수 = 변화있는 값.
프로그래밍 언어 회사에서 종류 정한다. < 자료의 타입/종류(자료형) >

[자료형] : 프로그래밍 언어에서 자료들을 분류하는 방법
    -> 왜? 편의성이면서, 데이터 처리를 효율적으로, 분리수거..

[JS 자료형]
1. 숫자형(Number) : 10(정수) , 3.14(실수, 소수점)
2. 문자열(String) : "" 또는 '' 따옴표로 감싼 자료
3. 불리언(boolean) : true 또는 false *대문자 주의
4. 배열(Array)  : [자료, 자료, 자료] 중괄호 안에 , 쉼표로 구분하여 여러 자료들을 감싼 1개의 자료 
5. 객체(object) : { 속성명 : 자료 , 속성명 : 자료 } 중괄호 안에, 쉼표 구분하여 이름과 값이 한쌍 자료 
6. 특수(null, underfined) : 자료가 할당되지 않은 상태..
underfined : 자료가 할당되지 않은 상태
null : 자료가 존재하지 않음

* 생각해보기1
    [10, 'A' , "사과" , 3.14]
    자료는 총 []포함 5개

* 생각해보기2
[{이름 : "김현수"} , 'A', 3.14]
    자료는 총 5개 {}, [] 포함..
리터럴은 3개이다. 이름, A, 3,14 즉, 실질적인값..


[문자열 : 템플릿 리터럴]

[문자열 : 이스케이프 문자] : \백슬래시 이용한 특수 기호
\\ : 백슬래시 출력
\' : 작은따옴표 출력
\" : 큰따옴표 출력
\n : 줄바꿈 처리
\t : 탭(들여쓰기) 처리

[배열] - 배열이란? 여러개의 자료로 [ ] 묶음
    1. 여러 자료들을 순서대로 저장하는 자료가
    2. 인덱스 : 배열내 저장된 자료들의 순서번호 , "0번시작된다"
    3. 사용법
        (1) 선언 : let/const 변수명 = [자료, 자료, 자료]
        (2) 호출 : 변수명
        (3) 수정 : 변수명 = [새로운 배열] or 변수명[인덱스] = 새로운값
        (4) 배열내 자료 총개수 : 변수명.length

[배열 : 자주 되는 함수]
1. 변수명:.push(새로운 값)
2. 변수명:.splice(인덱스, 개수)


[연산자]
1. 산술연산자 : + - * . %
2. 연결연산자
3. 비교연산자
4. 논리연산자
5. 대입연산자
6. 증감연산자
7. 삼항연산자(비교/논리 연산자)


[조건문] : 특정한 조건의 논리(true/false) 결과에 따라서 명령어를 처리한다.

ex.. -회원가입할때 아이디가 중복여부 판단

아이디 목록 = ['qwe']
새로운 아이디 = 'asd'

if(아이디목록.indexOf(새로운아이디) != -1 ){
    현재 사용중인 아이디 입니다.
}


0. for문 구조
    for(초기값 ; 조건문 ; 증감식){
        명령어(코드);
    }

1. 무한루프 조심

2. break, continue

3. 배열에는 index가 존재하여 0부터 순서대로 저장번호를 부여

4. 마지막 인덱스 : 변수명.length -1
for(let index = 0 ; index <= 변수명.length -1 ; index++ ){
    변수명[index];
}

5. 반복문 제어 키워드
(1) continue : 가장 가까운 for{}의 증감식 흐름 이동
(2) break  : 가장 가까운 for{} 의 탈출/종료 흐름 이동
(3) for( ; ; )  : 무한루프


[프로그래밍]
-프로그래밍 구성하기 위한 접근 방식
1. 절차지향 프로그래밍, C언어
    (1) 함수(절차) 이용한 순서가 정해진 작업
    (2) 코드가 위에서 아래로 순차적으로 실행, 단순하다.
2. 객체지향 프로그래밍, JAVA/JS/Python/C++
    (1) 객체(데이터/기능)을 [하나로 묶어서 처리] 작업
    (2) 코드의 재사용, 확장, 복잡하다.



[객체]
(*문제/요구사항: 다양한 표현)


** 사용법 **
(1) 객체 선언 : 속석명과 자료를 한쌍으로 엔트리라고 하고, ,(쉼표) 구분하여 여러개 엔트리{} 감싼다.
    {속성명 : 자료1, 속성명 : 자료2} 


(2) 객체도 하나 자료로써 변수에 대입될수 있다.
let 변수명 = {}
const 상수명 = {}

(3) 객체 호출
    객체 전체 : 변수명
    객체내 특정한 속성값1 : 변수명.속성명
    객체내 특정한 속성값2 : 변수명['속성명']
    관련 함수
    -> Object.keys(변수명) : 객체내 모든 속성명(key)를 배열로 반환
    -> Object.values(병수명) : 객체내 모든 자료(values)를 배열로 반환
    -> Object.entries(변수명) : 객체내 모든 엔트리(entry)를 배열로 반환

(4) 객체내 속성 다루기.
    속성 추가 : 변수명.속성명 = 자료
    속성값 수정 : 변수명.속성명 = 자료
    속성 삭제 : delete 변수명.속성명
    속성 확인 : '찾을 속성명' in 변수명, 찾을 속성명이 존재하면 true/false
    (*) 관례적으로 서로 다른 의미의 자료들은 객체로 묶어주고 동일한 의미의 자료들은 배열 묶는다.
    (*) 배열 : 인덱스로 자료를 구분, 객체 : 속성명으로 자료를 구분


[ 배열과 객체 ]

- 배열내 여러개 객체 이뤄진 형식 : [ {}, {}, {}, {}]

학생1의 이름 : 학생1.이름 --- <변수명.속성명>
ex) 학생1 = { 이름 : '유재석', 나이 : 40 }

학생목록 = [학생1, 학생2]
    학생의 1의 이름 : 학생목록[0].이름

배열내 모든 객체 조회
    for(let index = 0; index <= 배열변수.length-1; index++){
        let 객체 = 배열변수[index];
    }
    ex) 특정한 배열에서 원하는 값 찾으시오. ---> for사용

    for(let i=0; i<=학생목록.length-1; i++){
        if(학생목록[i].나이 >= 40){}
    }
-변수는 특징 : {}안에서 선언(let/const)된 변수는 {}밖으로 나갈수 없다. <지역변수>, 
                *지역변수는 특정한 범위내 에서만 사용 ->>범위 벗어나면 변수는 사라진다. --> 메모리 효율성 증대
    
    let A = 1;

   [[[ for(let index=0; index <=학생목록.length-1; index++){
        let B = 2;
    } ]]]- 특정범위 선언(let B = 2;)
    console.log(index); //for 안에서 선언된 index 변수이므로 호출 불가능(오류)
    console(B) 
    console(A)

    [[[let A = 1;]]]외부선언
