/*
[함수, function]
    1. 정의 : 특정한 { }안에 미리 정의된 코드
        -함(상자/공간/블럭) , 수(숫자/코드/명령어)
    2. 목적 : 미리 정의된 코드를 재사용
        -변수 : 값/데이터 저장해서 재사용                           , 객체명.속성명 : 자료호출
        -반복문 : 특정한 패턴(조건)에 따른 코드 반복(재사용)
        -함수 : 미리 정의된 코드에 따른 코드 반복                    , 객체명.속성명() : 함수호출
    3. 함수 종류
        (1) 라이브러리 : 미리 만들어진 함수, <사용>
            -console.log() , push() , document.write() 등등...
            -공부법 : 이해아님. 필요한 상황에 찾아서 익히기..
        (2) 정의함수 : 내가(개발자) 만든 함수, <정의, 사용>
    4. 함수도 JS에서는 *자료형
    5. JS함수 표현 방법
        1.*선언적 함수*        : 선언 키워드 이용하여 함수 만드는 방법  ,function 함수명(){}
        2. 익명 함수           : 함수명 없이 정의하는 방법             , function(){}
        3. 화살표(람다식)함수   : 선언 키워드와 함수명 없이 정의하는 방법, ()=>{}
    6. 함수를 만드는 방법
        1. function : 함수를 선언(만들기) 하기 위한 키워드
        2. 함수명   : 변수명과 동일하게 카멜표기법 권장 *mycar -->myCar, 숫자시작x , 띄어쓰기x
        3. ( )  : 매개변수(함수 안으로 들어오는 데이터를 저장하는 변수) 둘사이에 관계를 연결
                    인수 : 들어가는수
                    인자값 : 들어온 수
        4. { }  : 함수가 실행될때 처리되는 명령어들
        5. return : 함수가 종료되면서 함수를 호출했던 곳으로 반환되는값, 리턴값/반환값/응답값

        6. 함수호출/사용하는 방법
        -함수명();
        -함수명(인수1, 인수2); : ,(쉼표) 구분하여 정해진 매개변수에 따른 인수 대입

*/

/*
//[1] 함수 만들기
function 내가만든함수{
    console.log('내가 처음 만든 함수');  //함수를 만든거라 호출이 없음
} // fun end
// [2] 함수 호출하기
내가만든함수();
*/

/*
//함수 표현
function 더하기함수(x, y){         // 매개변수 : X랑 Y 변수를 중매(연결)
    console.log(x + y);
    return 10; //리턴값 : 함수 종료시 반환되는 값, 필수아님, 무조건 1개만 반환.
}// function end
//더하기함수(2, 3);    //x에 2를 중매하고, y에 3을 중매한다.
더하기함수(6, 7);


// [4] 믹서기 함수 *믹서기: 과일을 갈아서 주스를 반환한다.
function 믹서기함수(들어오는과일명){
    let 믹서결과 = 들어오는과일명 + '주스';
    return 믹서결과;
}
let 컵1 = 믹서기함수('사과')
console.log(컵1)

/* console.log();    x --> log() 실행후 반환되는 값이 없으므로
   let a = prompt(); O --> prompt 실행후 반환되는 값이 있으므로 
*/
/*
// [1] 매개변수 x, 반환값 x 없음..
function fun1(){
    console.log('fun1 exe');    
}

// [2] 매개변수 o , 반환값 x
function fun2(x, y){
    console.log(`fun2 exe ${x+y}`);
}

// [3] 매개변수o, 반환값 x
function func3(x, y){
    console.log(`fun3 exe`){
        let result = x+y;
        return result;
    }
}
// [4]
function fun4(){
    console.log(`fun4 exe`){
    return result
    }
}
fun1();                 // 매개변수x , 반환값 x
fun2(2, 3);              // 매개변수o , 반환값 x               
fun3(1, 5);              // 매개변수o , 반환값 o (변수에 저장x)
let a = fun3(1,5);        // 매개변수o , 반환값 o (변수에 저장o)
fun4();                  // 매개변수x , 반환값 o (변수에 저장 O/X 선택)
*/
//[6] 지역변수 : 특정한 {} 안에서 선언된 변수는 선언된 {} 밖에서 호출/사용 불가능
// {}종료되면 종료되는 {} 내 선언된 모든 메모리 자동으로 사라진다. <자동>
// ---> if(){}, for(){}, func1(){}
/*
let 전역변수 = '대한민국';
if(true){
    let 지역변수1 = ' 인천광역시';
    console.log(전역변수);
    console.log(지역변수1);
    for(let i=0; i<1; i++){
        let 지역변수2 ='부평구';
        console.log(전역변수)
        console.log(지역변수1)
        console.log(지역변수2)
            
    }

}
*/
//console.log(지역변수1); //fail
//console.log(지역변수2); //fail

// [7] 생각해보기 : 다수의 이름을 입력받아 배열 저장.
// 입력된 이름 : 지역변수/전역변수,
// 배열 : 지역변수/전역변수
/*
let nameList = []
function nameAdd(){
let name = prompt(`이름:`)
nameList.push(name);
}
nameAdd();
nameAdd();
console.log(nameList);

// [8] HTML 마크업의 이벤트 속성
function 이벤트함수(){
    console.log(`[[클릭]]`);
}
이벤트함수();
*/
//2. 이벤트함수();
// 2. HTML에서 JS함수 실행하는방법
// <마크업 이벤트 속성명 = "함수명">